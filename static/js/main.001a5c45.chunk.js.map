{"version":3,"sources":["FlexModelUtils.ts","hooks/useMediaQuery.ts","LoadTemplate.ts","App.tsx","index.tsx"],"names":["analyseRow","row","updateIfNeeded","widthNeeded","heightNeeded","getChildren","forEach","node","getType","TabSetNode","TYPE","ts","tabset","TabNode","Error","t","Math","max","getConfig","minHeight","minWidth","getMinWidth","getMinHeight","setSize","Actions","updateNodeAttributes","getId","getModel","doAction","getTabSetMinSize","getOrientation","Orientation","HORZ","RowNode","size","analyseModel","modelToAnalyse","lowestPrioTabset","undefined","activeTabset","rootRow","getRoot","console","log","visitNodes","toLowerCase","isActive","result","model","toJson","cloneModel","modelToClone","saveCurrentJson","clone","Model","fromJson","removeTabset","dockLocation","maxPanelNr","maxPanel","panels","Map","totalNrOfTabSets","panel","panelNr","set","childrenToMove","child","destinationId","panelPreferenceOrder","reduce","previousPreference","currentValue","Array","from","keys","get","dest","mv","moveNode","DockLocation","CENTER","del","deleteTabset","done","createUseMedia","effect","query","defaultState","useState","state","setState","mounted","mediaQueryList","window","matchMedia","onChange","Boolean","matches","addListener","removeListener","useMedia","useEffect","useLayoutEffect","taskTemplateLayout","global","layout","loadTemplateModel","howToStack","App","stashedModels","_setStashedModels","currentModel","_setCurrentModel","maxPanels","setMaxPanels","height","width","canvasToggleAbs","setCanvasToggleAbs","stackStrategy","setStackStrategy","layoutRef","useRef","setCurrentModel","length","downsizeModel","stackDirection","alteredModel","previousModelWidth","m","push","innerWidth","isTooNarrow","BOTTOM","tooWide","isTooWide","pop","isTooShort","absStyle","className","style","onClick","event","current","addTabWithDragAndDropIndirect","component","name","config","text","value","target","parseInt","ref","onAction","action","setTimeout","onModelChange","factory","getComponent","dangerouslySetInnerHTML","__html","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.001a5c45.chunk.js","sourcesContent":["import { Model, TabNode, TabSetNode, Orientation, Actions, Action, Node as FLNode, DockLocation, RowNode } from 'flexlayout-react';\r\n\r\n\r\n\r\nexport interface IAnalyzedModel {\r\n    model: Model,\r\n    activeTabset: FLNode | undefined,\r\n    lowestPrioTabset: FLNode | undefined,\r\n\r\n    widthNeeded?: number,\r\n    heightNeeded?: number,\r\n    rootRow?: FLNode | undefined\r\n}\r\n\r\ninterface IDimensions {\r\n    widthNeeded: number,\r\n    heightNeeded: number,\r\n}\r\n\r\n\r\nconst getTabSetMinSize = (tabset: TabSetNode, updateIfNeeded: boolean): IDimensions => {\r\n    let heightNeeded = 0;\r\n    let widthNeeded = 0;\r\n\r\n    // iterate through the tabs to get min sizes\r\n    tabset.getChildren().forEach(node => {\r\n        if (node.getType() !== TabNode.TYPE) {\r\n            throw Error(\"tabset has a child which is not a tab - this is not expected\")\r\n        }\r\n\r\n        const t = node as TabNode;\r\n        heightNeeded = Math.max(heightNeeded, t.getConfig().minHeight);\r\n        widthNeeded = Math.max(widthNeeded, t.getConfig().minWidth);\r\n\r\n    })\r\n\r\n    // to avoid infinite loops, updates cannot be done on model updates\r\n    if ((updateIfNeeded && (heightNeeded > 0 || widthNeeded > 0)) &&\r\n        (tabset.getMinWidth() != widthNeeded || tabset.getMinHeight() != heightNeeded)) {\r\n        // only modify if different because this causes a model update which again causes analyse\r\n        const setSize = Actions.updateNodeAttributes(tabset.getId(), { minWidth: widthNeeded, minHeight: heightNeeded });\r\n        tabset.getModel().doAction(setSize);\r\n    }\r\n\r\n    return {\r\n        widthNeeded,\r\n        heightNeeded\r\n    }\r\n\r\n}\r\n\r\nconst analyseRow = (row: RowNode, updateIfNeeded: boolean): IDimensions => {\r\n    let widthNeeded = 0;\r\n    let heightNeeded = 0;\r\n\r\n    row.getChildren().forEach(node => {\r\n        if (node.getType() === TabSetNode.TYPE) {\r\n            const ts = getTabSetMinSize(node as TabSetNode, updateIfNeeded);\r\n            if (row.getOrientation() === Orientation.HORZ) {\r\n                widthNeeded += ts.widthNeeded;\r\n                heightNeeded = Math.max(heightNeeded, ts.heightNeeded);\r\n            } else {\r\n                widthNeeded = Math.max(widthNeeded, ts.widthNeeded);\r\n                heightNeeded += ts.heightNeeded;\r\n            }\r\n        } else if (node.getType() === RowNode.TYPE) {\r\n            // recurse for child row\r\n            const size = analyseRow(node as RowNode, updateIfNeeded);\r\n            if (row.getOrientation() === Orientation.HORZ) {\r\n                if (size.widthNeeded) widthNeeded += size.widthNeeded;\r\n                if (size.heightNeeded) heightNeeded = Math.max(heightNeeded, size.heightNeeded);\r\n            } else {\r\n                if (size.widthNeeded) widthNeeded = Math.max(widthNeeded, size.widthNeeded);\r\n                if (size.heightNeeded) heightNeeded += size.heightNeeded;\r\n            }\r\n        }\r\n    })\r\n\r\n\r\n    return {\r\n        widthNeeded,\r\n        heightNeeded\r\n    }\r\n}\r\n\r\nexport const analyseModel = (modelToAnalyse: Model, updateIfNeeded: boolean = false): IAnalyzedModel => {\r\n\r\n    let lowestPrioTabset: TabSetNode | undefined = undefined;\r\n    let activeTabset: TabSetNode | undefined = undefined;\r\n    let rootRow = modelToAnalyse.getRoot();\r\n\r\n\r\n    console.log(\"Too doing analysis (\" + updateIfNeeded);\r\n    // find the tabset that is currently active, and also the first tabset (as fallback)\r\n    modelToAnalyse.visitNodes(node => {\r\n\r\n        if (!lowestPrioTabset && node.getType().toLowerCase() === 'tabset') lowestPrioTabset = node as TabSetNode;\r\n\r\n        if (!activeTabset && node.getType().toLowerCase() === 'tabset' && (node as TabSetNode).isActive()) {\r\n            activeTabset = node as TabSetNode;\r\n        }\r\n\r\n    });\r\n\r\n    // call analyze row with root\r\n    const size = analyseRow(rootRow, updateIfNeeded);\r\n\r\n    console.log(\"done\");\r\n\r\n    const result: IAnalyzedModel = {\r\n        model: modelToAnalyse,\r\n        activeTabset: activeTabset,\r\n        lowestPrioTabset: lowestPrioTabset,\r\n        rootRow,\r\n        widthNeeded: size.widthNeeded,\r\n        heightNeeded: size.heightNeeded\r\n    }\r\n\r\n    console.log(modelToAnalyse.toJson());\r\n\r\n    console.log(`SIZE : ${size.heightNeeded} x ${size.widthNeeded}`)\r\n    return result;\r\n}\r\n\r\n\r\nexport const cloneModel = (modelToClone: IAnalyzedModel): IAnalyzedModel => {\r\n    let saveCurrentJson = modelToClone.model.toJson();\r\n    let clone = { ...modelToClone };\r\n    clone.model = Model.fromJson(saveCurrentJson);\r\n    return clone;\r\n}\r\n\r\n\r\n\r\nexport const migrateModel = (sourceModel: IAnalyzedModel, targetModel: IAnalyzedModel) => {\r\n    let actions: Action[] = [];\r\n    let lastTabSet: TabSetNode;\r\n    console.log(\"migrating model\"); console.log(sourceModel); console.log(targetModel);\r\n\r\n    // Which nodes need to be deleted from target?\r\n    targetModel.model.visitNodes((node) => {\r\n        if (node.getType() === TabNode.TYPE) {\r\n            if (!sourceModel.model.getNodeById(node.getId())) {\r\n                actions.push(Actions.deleteTab(node.getId()));\r\n            }\r\n        } else if (node.getType() === TabSetNode.TYPE) {\r\n            lastTabSet = node as TabSetNode;\r\n        }\r\n    })\r\n\r\n    // which nodes need to added to the target?\r\n    sourceModel.model.visitNodes((node) => {\r\n        if (node.getType() === TabNode.TYPE) {\r\n            if (!targetModel.model.getNodeById(node.getId())) {\r\n                // add to the same parent if possible\r\n                const parent = node.getParent();\r\n                if (parent!.getType() === TabSetNode.TYPE && targetModel.model.getNodeById(parent!.getId())) {\r\n                    actions.push(Actions.addNode(node.toJson(), parent!.getId(), DockLocation.CENTER, -1, false));\r\n                } else {\r\n                    // Otherwise add to the last tabset in the model\r\n                    if (lastTabSet) {\r\n                        actions.push(Actions.addNode(node.toJson(), lastTabSet.getId(), DockLocation.CENTER, -1, false));\r\n                    } else {\r\n                        actions.push(Actions.addNode(node.toJson(), targetModel.model.getRoot().getId(), DockLocation.RIGHT, -1, false));\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n    });\r\n\r\n    actions.forEach(action => {\r\n        targetModel.model.doAction(action);\r\n    });\r\n}\r\n\r\n\r\n// 1. find the tabsets within the model and put them into a map based on their panel number\r\n// 2. for each panel, if its panel id is larger than max panel then it needs to be deleted but not before...\r\n// 3. ...moving its children to their preferred destination specified in panelPreferenceOrder.\r\n// The ids in this list are checked one-by-one until one is found that is \"small enough\" that that panel stills exists.\r\n// The child nodes are then moved to their new preferred / available panel\r\nexport const removeTabset = (model: Model, dockLocation: DockLocation, maxPanelNr?: number): Model => {\r\n    let maxPanel = -1;\r\n    const panels = new Map<number, TabSetNode>();\r\n    let totalNrOfTabSets = 0;\r\n\r\n    console.log(\"Removing tabset...\")\r\n    // first find out how many tabsets there are in the model and collect the ones with a \"panel\" number. Record max panel nr found\r\n    model.visitNodes((node) => {\r\n        if (node.getType() === 'tabset') {\r\n            totalNrOfTabSets++;\r\n            if ((node as TabSetNode).getConfig()?.panel) {\r\n                const ts = node as TabSetNode;\r\n                const panelNr = ts.getConfig().panel;\r\n                panels.set(panelNr, ts);\r\n                maxPanel = (panelNr > maxPanel) ? panelNr : maxPanel;\r\n            }\r\n        }\r\n    });\r\n    maxPanel = (maxPanelNr) ? maxPanelNr : maxPanel;\r\n\r\n    if (totalNrOfTabSets < 2) {\r\n        // don't want to delete the last tabset, so bail out here\r\n        return model;\r\n    }\r\n\r\n    if (panels.size > 0) {\r\n        // if there are tabsets in the model marked with a panel id then use this to decide which one to delete\r\n        panels.forEach((ts, panelNr) => {\r\n            if (panelNr >= maxPanel) {\r\n                // move the children\r\n                const childrenToMove = new Map<TabNode, TabSetNode>();\r\n                ts.getChildren().forEach((child) => {\r\n                    let destinationId = -1;\r\n                    if (child.getType() === 'tab' && (child as TabNode).getConfig().panelPreferenceOrder) {\r\n                        // find the prefered destination by looking through the pref order list until a small-enough number is found\r\n                        destinationId = ((child as TabNode).getConfig().panelPreferenceOrder as Array<number>).reduce((previousPreference, currentValue) => {\r\n                            if (previousPreference < maxPanel) {\r\n                                return previousPreference;\r\n                            }\r\n                            return currentValue;\r\n                        });\r\n                    }\r\n                    // if cant find preferred desination, just take first one\r\n                    if (destinationId === -1) {\r\n                        const ps = Array.from(panels.keys());\r\n                        destinationId = ps[0];\r\n                    }\r\n                    childrenToMove.set(child as TabNode, panels.get(destinationId)!);\r\n\r\n                })\r\n\r\n                childrenToMove.forEach((dest, child) => {\r\n                    let mv = Actions.moveNode(child.getId(), dest.getId(), DockLocation.CENTER, -1, false);\r\n                    model.doAction(mv);\r\n                }\r\n                )\r\n\r\n\r\n                // delete the tabset. Actually an empty tabset will not be rendered\r\n                // but this will confuse the task of finding next tab to remove\r\n                // so better to clean up\r\n                let del = Actions.deleteTabset(ts.getId());\r\n                model.doAction(del);\r\n            }\r\n        })\r\n    } else {\r\n        let done = false;\r\n        // no tabsets in the model have config.panel set so just delete the first one that isnt active\r\n        model.visitNodes((node) => {\r\n            if (!done && node.getType() === 'tabset' && !(node as TabSetNode).isActive()) {\r\n                let del = Actions.deleteTabset(node.getId());\r\n                model.doAction(del);\r\n                done = true;\r\n            }\r\n        });\r\n    }\r\n\r\n    console.log(\"done removing tabset\");\r\n    return model;\r\n}\r\n\r\n","// Based on https://github.com/streamich/use-media\r\n// simplified for initial implementation\r\n// more research needed to identify best library for media queries, and to expand to be a global App feature in context\r\n// Streamich has some good features, but maybe there is something better\r\nimport React, { DependencyList, EffectCallback } from 'react';\r\n\r\nimport { useState, useEffect, useLayoutEffect } from 'react';\r\n\r\nexport type Effect = (effect: EffectCallback, deps?: DependencyList) => void;\r\n\r\nconst createUseMedia = (effect: Effect) => (\r\n    query: string,\r\n    defaultState = false,\r\n) => {\r\n    const [state, setState] = useState(defaultState);\r\n\r\n    effect(() => {\r\n        let mounted = true;\r\n        const mediaQueryList: MediaQueryList = window.matchMedia(query);\r\n\r\n        const onChange = () => {\r\n            if (!mounted) {\r\n                return;\r\n            }\r\n            setState(Boolean(mediaQueryList.matches));\r\n        };\r\n\r\n        mediaQueryList.addListener(onChange);\r\n        setState(mediaQueryList.matches);\r\n\r\n        return () => {\r\n            mounted = false;\r\n            mediaQueryList.removeListener(onChange);\r\n        };\r\n    }, [query]);\r\n\r\n    return state;\r\n};\r\n\r\nexport const useMedia = createUseMedia(useEffect);\r\nexport const useMediaLayout = createUseMedia(useLayoutEffect);\r\n\r\nexport default useMedia;","import { Layout, Model, TabNode, TabSetNode, IJsonModel, Action, Actions, Node as FLNode, DockLocation } from 'flexlayout-react';\r\n\r\nimport { analyseModel, IAnalyzedModel, migrateModel, cloneModel, removeTabset } from './FlexModelUtils';\r\n\r\n\r\n\r\nvar taskTemplateLayout: { name: string, model: IJsonModel } = {\r\n    name: 'task1',\r\n    model: {\r\n        global: {\r\n            \"rootOrientationVertical\": false\r\n        }, // {tabSetEnableTabStrip:false}, // to have just splitters\r\n        layout: {\r\n            \"type\": \"row\",\r\n            \"weight\": 100,\r\n            \"children\": [\r\n                {\r\n                    \"type\": \"tabset\",\r\n                    \"weight\": 50,\r\n                    \"selected\": 0,\r\n                    \"config\": {\r\n                        \"panel\": 1\r\n                    },\r\n                    \"children\": [\r\n                        {\r\n                            \"type\": \"tab\",\r\n                            \"name\": \"One\",\r\n                            \"component\": \"text\",\r\n                            \"config\": {\r\n                                \"text\": \"<ul><li>drag tabs</li><li>drag splitters</li><li>double click on tab to rename</li><li>double click on tabstrip to maximize</li><li>use the Add button to add another tab</li></ul>\",\r\n                                \"minWidth\": 510,\r\n                                \"minHeight\": 350,\r\n                                \"panelPreferenceOrder\": [1]\r\n                            }\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    \"type\": \"tabset\",\r\n                    \"weight\": 50,\r\n                    \"selected\": 0,\r\n                    \"config\": {\r\n                        \"panel\": 3\r\n                    },\r\n                    \"children\": [\r\n                        {\r\n                            \"type\": \"tab\",\r\n                            \"name\": \"three\",\r\n                            \"component\": \"text\",\r\n                            \"config\": {\r\n                                \"text\": \"this is tab three\",\r\n                                \"minWidth\": 510,\r\n                                \"minHeight\": 350,\r\n                                \"panelPreferenceOrder\": [3, 2, 1]\r\n                            }\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    \"type\": \"tabset\",\r\n                    \"weight\": 50,\r\n                    \"selected\": 0,\r\n                    \"config\": {\r\n                        \"panel\": 2\r\n                    },\r\n                    \"children\": [\r\n                        {\r\n                            \"type\": \"tab\",\r\n                            \"name\": \"two\",\r\n                            \"component\": \"text\",\r\n                            \"config\": {\r\n                                \"text\": \"this is tab two\",\r\n                                \"minWidth\": 510,\r\n                                \"minHeight\": 350,\r\n                                \"panelPreferenceOrder\": [2, 1]\r\n                            }\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    \"type\": \"tabset\",\r\n                    \"weight\": 50,\r\n                    \"selected\": 0,\r\n                    \"config\": {\r\n                        \"panel\": 4\r\n                    },\r\n                    \"children\": [\r\n                        {\r\n                            \"type\": \"tab\",\r\n                            \"name\": \"four\",\r\n                            \"component\": \"text\",\r\n                            \"config\": {\r\n                                \"text\": \"this is tab four\",\r\n                                \"minWidth\": 510,\r\n                                \"minHeight\": 350,\r\n                                \"panelPreferenceOrder\": [4, 3, 2, 1]\r\n                            }\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    \"type\": \"tabset\",\r\n                    \"weight\": 50,\r\n                    \"selected\": 0,\r\n                    \"config\": {\r\n                        \"panel\": 5\r\n                    },\r\n                    \"children\": [\r\n                        {\r\n                            \"type\": \"tab\",\r\n                            \"name\": \"five\",\r\n                            \"component\": \"text\",\r\n                            \"config\": {\r\n                                \"text\": \"this is tab five\",\r\n                                \"minWidth\": 510,\r\n                                \"minHeight\": 350,\r\n                                \"panelPreferenceOrder\": [5, 4, 3, 2, 1]\r\n                            }\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n};\r\n\r\n\r\n\r\n// if maxPanel is undefined, return the canonical model (or in future the user's saved model if there is one, and the canonical model failing that)\r\n// if maxPanel is defined, transform the model \r\nexport const loadTemplateModel = (howToStack: DockLocation, maxPanel?: number,) => {\r\n    let model = Model.fromJson(taskTemplateLayout.model as IJsonModel);\r\n\r\n    if (maxPanel) {\r\n        model = removeTabset(model, howToStack, maxPanel + 1);\r\n    }\r\n    const templateModel = analyseModel(model, true);\r\n\r\n    return templateModel;\r\n}","import React, { useEffect, useRef, useState } from 'react';\nimport './App.css';\nimport 'flexlayout-react/style/light.css'\n\nimport { Layout, Model, TabNode, TabSetNode, IJsonModel, Action, Actions, Node as FLNode, DockLocation } from 'flexlayout-react';\n\nimport { analyseModel, IAnalyzedModel, migrateModel, cloneModel, removeTabset } from './FlexModelUtils';\n\nimport useMedia from './hooks/useMediaQuery';\n\nimport { loadTemplateModel } from './LoadTemplate'\n\n\nfunction App() {\n  // currentModel is what we're currently rendering.\n  // If we need to alter the layout due to size restrictions, the previous state is saved in \"stashedModels\" so that it can be restored later\n  const [stashedModels, _setStashedModels] = useState<IAnalyzedModel[]>(() => { return [loadTemplateModel(DockLocation.CENTER)] });\n  const [currentModel, _setCurrentModel] = useState(() => { return stashedModels[0] });\n  const [maxPanels, setMaxPanels] = useState(5);\n\n  const [canvasToggleAbs, setCanvasToggleAbs] = useState({ height: false, width: false });\n  const [stackStrategy, setStackStrategy] = useState('Z');\n\n\n  const layoutRef = useRef(null);\n\n  const setCurrentModel = () => {\n    // make sure that the current model is always pointing to the last in the stashed list\n    _setCurrentModel(stashedModels[stashedModels.length - 1]);\n  }\n\n\n  const downsizeModel = (stackDirection: DockLocation) => {\n    let alteredModel = cloneModel(currentModel);\n    let previousModelWidth = alteredModel.widthNeeded;\n\n    do {\n      let m = removeTabset(alteredModel.model, stackDirection);\n      alteredModel = analyseModel(m);\n\n      // if that helped, push altered model onto the stack\n      if (alteredModel.widthNeeded != previousModelWidth) {\n        stashedModels.push(alteredModel);\n        _setStashedModels(stashedModels);\n      }\n      alteredModel = cloneModel(alteredModel);\n    } while (alteredModel.widthNeeded != previousModelWidth && alteredModel.widthNeeded! > window.innerWidth)\n    setCurrentModel();\n    // keep removing tabsets until its narrow enough, or we're not making any further progress\n  }\n\n\n\n  // If the viewport is too narrow for the current model....\n  const isTooNarrow = useMedia(`(max-width: ${currentModel.widthNeeded}px)`);\n  useEffect(() => {\n\n    if (isTooNarrow) {\n      console.log(\"Too Narrow \" + currentModel.widthNeeded);\n\n      switch (stackStrategy) {\n        case 'X':\n          setCanvasToggleAbs({ height: false, width: true });\n          break;\n        case 'Y':\n          downsizeModel(DockLocation.BOTTOM);\n          break;\n        case 'Z':\n          downsizeModel(DockLocation.CENTER);\n          setCanvasToggleAbs({ height: false, width: false });\n      }\n\n    } else if (stackStrategy === 'X') {\n      // No need for absolute width anymore\n      setCanvasToggleAbs({ height: false, width: false });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isTooNarrow]);\n\n\n  // is the viewport now wide enough to switch back to the previous model?\n  const tooWide = stashedModels.length > 1 ? ((stashedModels[stashedModels.length - 2] as IAnalyzedModel).widthNeeded!) : 9999999999;\n  console.log(\"===> too wide is \" + tooWide);\n  const isTooWide = useMedia(`(min-width: ${tooWide}px`);\n  useEffect(() => {\n    console.log(`Too wide: ${isTooWide} ${tooWide} (looking at ${stashedModels.length - 2})`)\n\n    if (isTooWide) {\n      //   migrateModel(currentModel, stashedModels[stashedModels.length - 2]);\n      stashedModels.pop();\n      _setStashedModels(stashedModels);\n      setCurrentModel();\n      // _setStashedModels(stashedModels); console.log(\"====>calling set stashed models\");\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isTooWide]);\n\n\n\n  // If too short for current model switch to absolute, \n  const isTooShort = useMedia(`(max-height: ${currentModel.heightNeeded}px)`);\n  useEffect(() => {\n    if (currentModel) {\n      if (!isTooShort) {\n        setCanvasToggleAbs({ height: false, width: canvasToggleAbs.width });\n        console.log(\"REL CANVAS :\" + currentModel.heightNeeded);\n      } else {\n        setCanvasToggleAbs({ height: true, width: canvasToggleAbs.width });\n\n        console.log(\"ABS CANVAS :\" + currentModel.heightNeeded);\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isTooShort]);\n\n\n  const factory = (node: TabNode) => {\n    var component = node.getComponent();\n    if (component === \"text\") {\n      return <div dangerouslySetInnerHTML={{ __html: node.getConfig().text }} />;\n    }\n  }\n\n  const onAdd = (event: any) => {\n    (layoutRef.current! as Layout).addTabWithDragAndDropIndirect(\"Add panel<br>(Drag to location)\", {\n      component: \"text\",\n      name: \"added\",\n      config: { text: \"i was added\", minHeight: 300, minWidth: 400 }\n    }, undefined);\n  }\n\n  const interceptAction = (action: Action) => {\n    console.log(action);\n\n    // when tabs are moved by the user, this can lead to a \"divide\" whereby a new tabset is created automatically for the tab\n    // this new tabset will not have a minimum size and so this needs to be set\n    // also for deletion of tabs or addition of nodes, the size may be impacted\n    setTimeout(() => {\n      console.log(\"Too timer...\");\n      stashedModels[stashedModels.length - 1] = analyseModel(currentModel.model, true /* update min sizes if needed*/);\n    }, 100);\n\n    return action;\n  }\n\n  const changeStrategy = (event: any) => {\n    setCanvasToggleAbs({ height: false, width: false });\n    setStackStrategy(event.target.value);\n  }\n\n  const loadPanels = (event: any) => {\n    console.log(\"loading ... \");\n    setMaxPanels(parseInt(event.target.value));\n    _setStashedModels([loadTemplateModel(DockLocation.CENTER, maxPanels)]);\n    setCurrentModel();\n    console.log(\"set current model \"); console.log(stashedModels);\n\n    console.log(\"===UPDATED\");\n  }\n\n  const modelChanged = (model: Model) => {\n    console.log(\"Too model changed\");\n    console.log(model);\n\n    stashedModels[stashedModels.length - 1] = analyseModel(currentModel.model, false /* avoid infintie loop*/);\n\n  }\n\n  const absStyle = {\n    height: canvasToggleAbs.height ? currentModel.heightNeeded + 'px' : '100%',\n    width: canvasToggleAbs.width ? currentModel.widthNeeded + 'px' : '100%'\n  };\n\n  console.log(\"===RENDERING : \" + stashedModels.length + \" \" + stashedModels[stashedModels.length - 1].widthNeeded);\n  console.log(\"==== current model width is \" + currentModel.widthNeeded); console.log(currentModel);\n  return (\n\n\n    <div className=\"outer\" style={absStyle}>\n      <button onClick={onAdd}>Add Panel</button>\n      <span> Stacking strategy:</span>\n      <select value={stackStrategy} onChange={changeStrategy}>\n        <option value=\"X\">X axis</option>\n        <option value=\"Y\">Y axis</option>\n        <option value=\"Z\">Z axis</option>\n      </select>\n      <span> Number of Panels:</span>\n      <select value={maxPanels} onChange={loadPanels}>\n        <option value=\"1\">1</option>\n        <option value=\"2\">2</option>\n        <option value=\"3\">3</option>\n        <option value=\"4\">4</option>\n        <option value=\"5\">5</option>\n      </select>\n      <div className=\"inner\" >\n        {currentModel && (\n          <Layout ref={layoutRef}\n            onAction={interceptAction}\n            onModelChange={modelChanged}\n            model={currentModel.model}\n            factory={factory} />)}\n      </div>\n    </div>\n\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('container')\n);\n"],"sourceRoot":""}