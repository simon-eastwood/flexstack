{"version":3,"sources":["FlexModelUtils.ts","hooks/useMediaQuery.ts","LoadTemplate.ts","App.tsx","index.tsx"],"names":["analyseRow","row","updateIfNeeded","widthNeeded","heightNeeded","getChildren","forEach","node","getType","TabSetNode","TYPE","ts","tabset","TabNode","Error","t","Math","max","getConfig","minHeight","minWidth","getMinWidth","getMinHeight","setSize","Actions","updateNodeAttributes","getId","getModel","doAction","getTabSetMinSize","getOrientation","Orientation","HORZ","RowNode","size","analyseModel","modelToAnalyse","lowestPrioTabset","undefined","activeTabset","visitNodes","toLowerCase","isActive","getRoot","result","model","console","log","cloneModel","modelToClone","saveCurrentJson","toJson","clone","Model","fromJson","moveTabset","panels","Map","panelNr","panel","set","mv","moveNode","get","DockLocation","BOTTOM","removeTabset","maxPanelNr","maxPanel","childrenToMove","child","tab","tabToDestination","dest","p","destMajor","CENTER","destMinor","destPref","del","deleteTabset","reorderTabs","tabsToMove","panelPreferences","length","floor","abs","round","createUseMedia","effect","query","defaultState","useState","state","setState","mounted","mediaQueryList","window","matchMedia","onChange","Boolean","matches","addListener","removeListener","useMedia","useEffect","useLayoutEffect","taskTemplateLayout","global","layout","loadTemplateModel","howToStack","App","defaultNrPanels","currentWidth","innerWidth","stashedModels","_setStashedModels","maxPanels","setMaxPanels","height","width","canvasToggleAbs","setCanvasToggleAbs","stackStrategy","layoutRef","useRef","currentModel","stashSet","isTooNarrow","stackDirection","alteredModel","previousModelWidth","newStash","m","push","downsizeModel","tooWide","isTooWide","sourceModel","targetModel","lastTabSet","actions","getNodeById","deleteTab","parent","getParent","addNode","RIGHT","action","migrateModel","slice","stashPop","absStyle","className","style","value","event","parseInt","target","ref","onAction","setTimeout","onModelChange","factory","component","getComponent","dangerouslySetInnerHTML","__html","text","overflow","src","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.74ca013d.chunk.js","sourcesContent":["import { Model, TabNode, TabSetNode, Orientation, Actions, Action, Node as FLNode, DockLocation, RowNode } from 'flexlayout-react';\r\nimport { parseConfigFileTextToJson } from 'typescript';\r\n\r\n\r\n\r\nexport interface IAnalyzedModel {\r\n    model: Model,\r\n    activeTabset: FLNode | undefined,\r\n    widthNeeded?: number,\r\n    heightNeeded?: number\r\n}\r\n\r\ninterface IDimensions {\r\n    widthNeeded: number,\r\n    heightNeeded: number,\r\n}\r\n\r\n\r\nconst getTabSetMinSize = (tabset: TabSetNode, updateIfNeeded: boolean): IDimensions => {\r\n    let heightNeeded = 0;\r\n    let widthNeeded = 0;\r\n\r\n    // iterate through the tabs to get min sizes\r\n    tabset.getChildren().forEach(node => {\r\n        if (node.getType() !== TabNode.TYPE) {\r\n            throw Error(\"tabset has a child which is not a tab - this is not expected\")\r\n        }\r\n\r\n        const t = node as TabNode;\r\n        heightNeeded = Math.max(heightNeeded, t.getConfig().minHeight);\r\n        widthNeeded = Math.max(widthNeeded, t.getConfig().minWidth);\r\n\r\n    })\r\n\r\n    // to avoid infinite loops, updates cannot be done on model updates\r\n    if ((updateIfNeeded && (heightNeeded > 0 || widthNeeded > 0)) &&\r\n        (tabset.getMinWidth() !== widthNeeded || tabset.getMinHeight() !== heightNeeded)) {\r\n        // only modify if different because this causes a model update which again causes analyse\r\n        const setSize = Actions.updateNodeAttributes(tabset.getId(), { minWidth: widthNeeded, minHeight: heightNeeded });\r\n        tabset.getModel().doAction(setSize);\r\n    }\r\n\r\n    return {\r\n        widthNeeded,\r\n        heightNeeded\r\n    }\r\n\r\n}\r\n\r\nconst analyseRow = (row: RowNode, updateIfNeeded: boolean): IDimensions => {\r\n    let widthNeeded = 0;\r\n    let heightNeeded = 0;\r\n\r\n    row.getChildren().forEach(node => {\r\n        if (node.getType() === TabSetNode.TYPE) {\r\n            const ts = getTabSetMinSize(node as TabSetNode, updateIfNeeded);\r\n            if (row.getOrientation() === Orientation.HORZ) {\r\n                widthNeeded += ts.widthNeeded;\r\n                heightNeeded = Math.max(heightNeeded, ts.heightNeeded);\r\n            } else {\r\n                widthNeeded = Math.max(widthNeeded, ts.widthNeeded);\r\n                heightNeeded += ts.heightNeeded;\r\n            }\r\n        } else if (node.getType() === RowNode.TYPE) {\r\n            // recurse for child row\r\n            const size = analyseRow(node as RowNode, updateIfNeeded);\r\n            if (row.getOrientation() === Orientation.HORZ) {\r\n                if (size.widthNeeded) widthNeeded += size.widthNeeded;\r\n                if (size.heightNeeded) heightNeeded = Math.max(heightNeeded, size.heightNeeded);\r\n            } else {\r\n                if (size.widthNeeded) widthNeeded = Math.max(widthNeeded, size.widthNeeded);\r\n                if (size.heightNeeded) heightNeeded += size.heightNeeded;\r\n            }\r\n        }\r\n    })\r\n\r\n\r\n    return {\r\n        widthNeeded,\r\n        heightNeeded\r\n    }\r\n}\r\n\r\nexport const analyseModel = (modelToAnalyse: Model, updateIfNeeded: boolean = true): IAnalyzedModel => {\r\n\r\n    let lowestPrioTabset: TabSetNode | undefined = undefined;\r\n    let activeTabset: TabSetNode | undefined = undefined;\r\n\r\n\r\n\r\n    // find the tabset that is currently active, and also the first tabset (as fallback)\r\n    modelToAnalyse.visitNodes(node => {\r\n\r\n        if (!lowestPrioTabset && node.getType().toLowerCase() === 'tabset') lowestPrioTabset = node as TabSetNode;\r\n\r\n        if (!activeTabset && node.getType().toLowerCase() === 'tabset' && (node as TabSetNode).isActive()) {\r\n            activeTabset = node as TabSetNode;\r\n        }\r\n\r\n    });\r\n\r\n    // call analyze row with root\r\n    const size = analyseRow(modelToAnalyse.getRoot(), updateIfNeeded);\r\n\r\n    const result: IAnalyzedModel = {\r\n        model: modelToAnalyse,\r\n        activeTabset: activeTabset,\r\n        widthNeeded: size.widthNeeded,\r\n        heightNeeded: size.heightNeeded\r\n    }\r\n\r\n    console.log(\"updateifneeded? \" + updateIfNeeded);\r\n    console.log(result);\r\n    return result;\r\n}\r\n\r\n\r\nexport const cloneModel = (modelToClone: IAnalyzedModel): IAnalyzedModel => {\r\n    let saveCurrentJson = modelToClone.model.toJson();\r\n    let clone = { ...modelToClone };\r\n    clone.model = Model.fromJson(saveCurrentJson);\r\n    return clone;\r\n}\r\n\r\n\r\n\r\nexport const migrateModel = (sourceModel: IAnalyzedModel, targetModel: IAnalyzedModel) => {\r\n    let actions: Action[] = [];\r\n    let lastTabSet: TabSetNode;\r\n\r\n    // Which nodes need to be deleted from target?\r\n    targetModel.model.visitNodes((node) => {\r\n        if (node.getType() === TabNode.TYPE) {\r\n            if (!sourceModel.model.getNodeById(node.getId())) {\r\n                actions.push(Actions.deleteTab(node.getId()));\r\n            }\r\n        } else if (node.getType() === TabSetNode.TYPE) {\r\n            lastTabSet = node as TabSetNode;\r\n        }\r\n    })\r\n\r\n    // which nodes need to added to the target?\r\n    sourceModel.model.visitNodes((node) => {\r\n        if (node.getType() === TabNode.TYPE) {\r\n            if (!targetModel.model.getNodeById(node.getId())) {\r\n                // add to the same parent if possible\r\n                const parent = node.getParent();\r\n                if (parent!.getType() === TabSetNode.TYPE && targetModel.model.getNodeById(parent!.getId())) {\r\n                    actions.push(Actions.addNode(node.toJson(), parent!.getId(), DockLocation.CENTER, -1, false));\r\n                } else {\r\n                    // Otherwise add to the last tabset in the model\r\n                    if (lastTabSet) {\r\n                        actions.push(Actions.addNode(node.toJson(), lastTabSet.getId(), DockLocation.CENTER, -1, false));\r\n                    } else {\r\n                        actions.push(Actions.addNode(node.toJson(), targetModel.model.getRoot().getId(), DockLocation.RIGHT, -1, false));\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n    });\r\n\r\n    actions.forEach(action => {\r\n        targetModel.model.doAction(action);\r\n    });\r\n}\r\n\r\nexport const moveTabset = (model: Model): Model => {\r\n    const panels = new Map<number, TabSetNode>();\r\n\r\n    let panelNr = 1;\r\n    model.visitNodes((node) => {\r\n        if (node.getType() === 'tabset') {\r\n            if ((node as TabSetNode).getConfig()?.panel) {\r\n                const ts = node as TabSetNode;\r\n                panels.set(panelNr++, ts);\r\n            }\r\n        }\r\n    });\r\n\r\n    if (panels.size < 2) {\r\n        // can't move the  last tabset, so bail out here\r\n        return model;\r\n    }\r\n\r\n    let mv = Actions.moveNode(panels.get(panels.size)!.getId(), model.getRoot().getId(), DockLocation.BOTTOM, -1, false);\r\n    model.doAction(mv);\r\n\r\n    return model;\r\n}\r\n\r\n\r\n// 1. find the tabsets within the model and put them into a map based on their panel number\r\n// 2. for each panel, if its panel nr is larger than max panel then it needs to be deleted but not before...\r\n// 3. ...moving its children to their preferred destination specified in panelPreferences.\r\n// The child nodes are then moved to their new preferred / available panel\r\nexport const removeTabset = (model: Model, maxPanelNr?: number): Model => {\r\n    let maxPanel = -1;\r\n    const panels = new Map<number, TabSetNode>();\r\n\r\n\r\n    // first find out how many tabsets there are in the model and collect them in a map. \r\n    let panelNr = 1;\r\n    model.visitNodes((node) => {\r\n        if (node.getType() === 'tabset') {\r\n            const ts = node as TabSetNode;\r\n            panels.set(panelNr++, ts);\r\n        }\r\n    });\r\n    maxPanel = (maxPanelNr) ? maxPanelNr : panels.size;\r\n\r\n    if (panels.size < 2) {\r\n        // don't want to delete the last tabset, so bail out here\r\n        return model;\r\n    }\r\n\r\n    // Now delete the top N tabsets\r\n    // if this function is called without a maxPanelNr then that's just the last panel (e.g. 5)\r\n    // if this function is called with a maxPanelNr (cos we're loading a template and the user only wants e.g. 2 panels) then that could be more than 1\r\n\r\n    panels.forEach((ts, panelNr) => {\r\n        if (panelNr >= maxPanel) {\r\n            // move the children\r\n            const childrenToMove = new Map<TabNode, Destination>();\r\n            ts.getChildren().forEach((child) => {\r\n                if (child.getType() === 'tab') {\r\n                    const tab = child as TabNode;\r\n                    childrenToMove.set(tab, tabToDestination(tab, maxPanel - 1));\r\n                }\r\n            })\r\n\r\n            childrenToMove.forEach((dest, child) => {\r\n                let p = panels.get(dest.destMajor);\r\n                let mv;\r\n                if (p) {\r\n                    mv = Actions.moveNode(child.getId(), p!.getId(), DockLocation.CENTER, dest.destMinor - 1, (dest.destPref ? dest.destPref > 0 : false) /* +ve = selected */);\r\n                } else {\r\n                    // got to move it somewhere....then to root\r\n                    mv = Actions.moveNode(child.getId(), model.getRoot().getId(), DockLocation.CENTER, - 1, false);\r\n                }\r\n                model.doAction(mv);\r\n            })\r\n\r\n\r\n            // delete the tabset. Actually an empty tabset will not be rendered\r\n            // but this will confuse the task of finding next tab to remove\r\n            // so better to clean up\r\n            let del = Actions.deleteTabset(ts.getId());\r\n            model.doAction(del);\r\n        }\r\n    })\r\n\r\n    // With less tabsets, some other tabs might prefer to be moved\r\n    reorderTabs(model);\r\n    return model;\r\n}\r\n\r\n// move tabs if necessary so that they are all on their preferred panel, in the preferred order\r\nconst reorderTabs = (model: Model) => {\r\n    const panels = new Map<number, TabSetNode>();\r\n\r\n    // first find out how many tabsets there are in the model \r\n    let panelNr = 1;\r\n    model.visitNodes((node) => {\r\n        if (node.getType() === 'tabset') {\r\n            const ts = node as TabSetNode;\r\n            panels.set(panelNr++, ts);\r\n        }\r\n    });\r\n\r\n    // Now iterate through the tabs and see where to move them\r\n    const tabsToMove = new Map<TabNode, Destination>();\r\n    model.visitNodes((node) => {\r\n        if (node.getType() === 'tab') {\r\n            tabsToMove.set(node as TabNode, tabToDestination(node as TabNode, panels.size));\r\n        }\r\n    });\r\n\r\n\r\n    // now do the moves\r\n    tabsToMove.forEach((dest, tab) => {\r\n        let mv;\r\n\r\n        if (dest.destMajor !== 0) {\r\n            let p = panels.get(dest.destMajor);\r\n            // tabOrder is the number after the decimal point\r\n            if (p) {\r\n                mv = Actions.moveNode(tab.getId(), p!.getId(), DockLocation.CENTER, dest.destMinor - 1, (dest.destPref ? dest.destPref > 0 : false) /* +ve = selected */);\r\n                model.doAction(mv);\r\n            }\r\n        }\r\n\r\n    })\r\n\r\n\r\n}\r\n\r\n\r\n// use tab config to see, for the given max panel, where the tab should go\r\ntype Destination = {\r\n    destPref: number | undefined, // the original config value (can be negative or undefined)\r\n    destMajor: number, // 0 means unknown destination\r\n    destMinor: number\r\n}\r\nconst tabToDestination = (tab: TabNode, maxPanel: number = 5): Destination => {\r\n    let destPref;\r\n\r\n    if (tab.getConfig()?.panelPreferences?.length >= maxPanel) {\r\n        destPref = tab.getConfig().panelPreferences[maxPanel - 1];\r\n        const destMajor = Math.floor(Math.abs(destPref));\r\n        const destMinor = Math.round((Math.abs(destPref) === destMajor) ? 0 : (Math.abs(destPref) - destMajor) * 10);\r\n\r\n        return {\r\n            destPref,\r\n            destMajor,\r\n            destMinor\r\n        }\r\n    } else {\r\n        return {\r\n            destPref,\r\n            destMajor: 0,\r\n            destMinor: -1\r\n        }\r\n    }\r\n\r\n}","// Based on https://github.com/streamich/use-media\r\n// simplified for initial implementation\r\n// more research needed to identify best library for media queries, and to expand to be a global App feature in context\r\n// Streamich has some good features, but maybe there is something better\r\nimport React, { DependencyList, EffectCallback } from 'react';\r\n\r\nimport { useState, useEffect, useLayoutEffect } from 'react';\r\n\r\nexport type Effect = (effect: EffectCallback, deps?: DependencyList) => void;\r\n\r\nconst createUseMedia = (effect: Effect) => (\r\n    query: string,\r\n    defaultState = false,\r\n) => {\r\n    const [state, setState] = useState(defaultState);\r\n\r\n    effect(() => {\r\n        let mounted = true;\r\n        const mediaQueryList: MediaQueryList = window.matchMedia(query);\r\n\r\n        const onChange = () => {\r\n            if (!mounted) {\r\n                return;\r\n            }\r\n            setState(Boolean(mediaQueryList.matches));\r\n        };\r\n\r\n        mediaQueryList.addListener(onChange);\r\n        setState(mediaQueryList.matches);\r\n\r\n        return () => {\r\n            mounted = false;\r\n            mediaQueryList.removeListener(onChange);\r\n        };\r\n    }, [query]);\r\n\r\n    return state;\r\n};\r\n\r\nexport const useMedia = createUseMedia(useEffect);\r\nexport const useMediaLayout = createUseMedia(useLayoutEffect);\r\n\r\nexport default useMedia;","import { Model, IJsonModel, DockLocation } from 'flexlayout-react';\r\n\r\nimport { analyseModel, removeTabset, moveTabset } from './FlexModelUtils';\r\n\r\n\r\n\r\nvar taskTemplateLayout: { name: string, model: IJsonModel } = {\r\n    name: 'task1',\r\n    model: {\r\n        global: {\r\n            \"rootOrientationVertical\": false,\r\n            // \"tabSetEnableDivide\": false, // it keeps things simpler for moving tabs if all tabsets are labelled with a panel nr\r\n            // \"enableEdgeDock\": false, // otherwise the user can create new tabsets by dragging into the edge\r\n            \"tabEnableClose\": false\r\n        }, // {tabSetEnableTabStrip:false}, // to have just splitters\r\n        layout: {\r\n            \"type\": \"row\",\r\n\r\n            \"children\": [\r\n                {\r\n                    \"type\": \"tabset\",\r\n                    \"selected\": 0,\r\n                    \"children\": [\r\n                        {\r\n                            \"type\": \"tab\",\r\n                            \"name\": \"Comm\",\r\n                            \"component\": \"pdf\",\r\n                            \"enableClose\": false,\r\n                            \"config\": {\r\n                                \"text\": \"https://www.ibm.com/downloads/cas/GB8ZMQZ3\",\r\n                                \"minWidth\": 50,\r\n                                \"minHeight\": 350,\r\n                                \"panelPreferences\": [1.1, 1.1, 1.1, 1.1, 1.1]\r\n                            }\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    \"type\": \"tabset\",\r\n                    \"selected\": 0,\r\n                    \"children\": [\r\n                        {\r\n                            \"type\": \"tab\",\r\n                            \"name\": \"Letter\",\r\n                            \"component\": \"pdf\",\r\n                            \"enableClose\": false,\r\n                            \"config\": {\r\n                                \"text\": \"https://ai.stanford.edu/~nilsson/MLBOOK.pdf\",\r\n                                \"minWidth\": 50,\r\n                                \"minHeight\": 350,\r\n                                \"panelPreferences\": [-1.3, -1.3, 2.1, 2.1, 2.1]\r\n                            }\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    \"type\": \"tabset\",\r\n                    \"selected\": 0,\r\n                    \"children\": [\r\n                        {\r\n                            \"type\": \"tab\",\r\n                            \"name\": \"Claims\",\r\n                            \"component\": \"pdf\",\r\n                            \"enableClose\": false,\r\n                            \"config\": {\r\n                                \"text\": \"https://patentimages.storage.googleapis.com/68/80/73/6a17a66e9ec8c5/US11107588.pdf\",\r\n                                \"minWidth\": 50,\r\n                                \"minHeight\": 350,\r\n                                \"panelPreferences\": [-1.4, -2.2, -3.2, 3.1, 3.1]\r\n                            }\r\n                        }\r\n                    ]\r\n                },\r\n\r\n                {\r\n                    \"type\": \"tabset\",\r\n                    \"selected\": 0,\r\n                    \"children\": [\r\n                        {\r\n                            \"type\": \"tab\",\r\n                            \"name\": \"Fig\",\r\n                            \"component\": \"image\",\r\n                            \"enableClose\": false,\r\n                            \"config\": {\r\n                                \"text\": \"https://patentimages.storage.googleapis.com/US20060145019A1/US20060145019A1-20060706-D00000.png\",\r\n                                \"minWidth\": 250,\r\n                                \"minHeight\": 350,\r\n                                \"panelPreferences\": [-1.2, -1.2, -1.2, -1.2, 4.1]\r\n                            }\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    \"type\": \"tabset\",\r\n                    \"selected\": 0,\r\n                    \"children\": [\r\n                        {\r\n                            \"type\": \"tab\",\r\n                            \"name\": \"AppAn\",\r\n                            \"component\": \"123check\",\r\n                            \"enableClose\": false,\r\n                            \"config\": {\r\n                                \"text\": \"/flexstack/123Check_only.png\",\r\n                                \"minWidth\": 1252,\r\n                                \"minHeight\": 350,\r\n                                \"panelPreferences\": [-1.5, 2.1, 3.1, 4.1, 5.1]\r\n                            }\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    }\r\n};\r\n\r\n\r\n\r\n// if maxPanel is undefined, return the canonical model (or in future the user's saved model if there is one, and the canonical model failing that)\r\n// if maxPanel is defined, transform the model \r\nexport const loadTemplateModel = (howToStack: DockLocation, maxPanel?: number,) => {\r\n    let model = Model.fromJson(taskTemplateLayout.model as IJsonModel);\r\n\r\n    if (maxPanel) {\r\n        if (howToStack === DockLocation.BOTTOM) {\r\n            model = moveTabset(model);\r\n        } else {\r\n            model = removeTabset(model, maxPanel + 1);\r\n        }\r\n    }\r\n    const templateModel = analyseModel(model);\r\n\r\n    return templateModel;\r\n}","import React, { useEffect, useRef, useState } from 'react';\r\nimport './App.css';\r\nimport 'flexlayout-react/style/light.css'\r\n\r\nimport { Layout, Model, TabNode, Action, DockLocation } from 'flexlayout-react';\r\n\r\nimport { analyseModel, IAnalyzedModel, migrateModel, cloneModel, removeTabset, moveTabset } from './FlexModelUtils';\r\n\r\nimport useMedia from './hooks/useMediaQuery';\r\n\r\nimport { loadTemplateModel } from './LoadTemplate'\r\n\r\n\r\nfunction App() {\r\n  // currentModel is what we're currently rendering.\r\n  // If we need to alter the layout due to size restrictions, the previous state is saved in \"stashedModels\" so that it can be restored later\r\n  const [stashedModels, _setStashedModels] = useState<IAnalyzedModel[]>(() => {\r\n    // this is now hardocded but it should be deduced by analysing the template model for this task\r\n    const currentWidth = window.innerWidth;\r\n    let defaultNrPanels;\r\n    if (currentWidth > 1652) {\r\n      defaultNrPanels = 5;\r\n    } else if (currentWidth > 1652 - 50) {\r\n      defaultNrPanels = 4;\r\n    } else if (currentWidth > (1652 - 50) - 50) {\r\n      defaultNrPanels = 3;\r\n    } else if (currentWidth > ((1652 - 50) - 50) - 50) {\r\n      defaultNrPanels = 2;\r\n    } else {\r\n      defaultNrPanels = 1;\r\n    }\r\n    return [loadTemplateModel(DockLocation.CENTER, defaultNrPanels)]\r\n  });\r\n  const [maxPanels, setMaxPanels] = useState(5);\r\n\r\n  const [canvasToggleAbs, setCanvasToggleAbs] = useState({ height: false, width: false });\r\n  const [stackStrategy, setStackStrategy] = useState('NONE');\r\n\r\n\r\n  const layoutRef = useRef(null);\r\n\r\n  const currentModel = stashedModels[stashedModels.length - 1];\r\n\r\n\r\n  const stashPop = () => {\r\n    const newStash = stashedModels.slice(0, -1);\r\n    _setStashedModels(newStash);\r\n  }\r\n\r\n  const stashSet = (model: IAnalyzedModel[]) => {\r\n    _setStashedModels(model);\r\n  }\r\n\r\n\r\n  const downsizeModel = (stackDirection: DockLocation) => {\r\n    let alteredModel = cloneModel(currentModel);\r\n    let previousModelWidth = alteredModel.widthNeeded;\r\n\r\n    const newStash = [...stashedModels];\r\n\r\n    do {\r\n      let m;\r\n      if (stackDirection === DockLocation.BOTTOM) {\r\n        m = moveTabset(alteredModel.model);\r\n      } else {\r\n        m = removeTabset(alteredModel.model);\r\n      }\r\n      alteredModel = analyseModel(m);\r\n\r\n\r\n      // if that helped, push altered model onto the stack\r\n      if (alteredModel.widthNeeded !== previousModelWidth) {\r\n        newStash.push(alteredModel);\r\n      }\r\n      alteredModel = cloneModel(alteredModel);\r\n    } while (alteredModel.widthNeeded !== previousModelWidth && alteredModel.widthNeeded! > window.innerWidth)\r\n    // keep removing tabsets until its narrow enough, or we're not making any further progress\r\n\r\n    // note: cannot use push in a loop because setState is asyncrhonous and only the last call to setState persists\r\n    stashSet(newStash);\r\n  }\r\n\r\n\r\n\r\n  // If the viewport is too narrow for the current model....\r\n  const isTooNarrow = useMedia(`(max-width: ${currentModel.widthNeeded}px)`);\r\n  useEffect(() => {\r\n\r\n    if (isTooNarrow) {\r\n      switch (stackStrategy) {\r\n/*         case 'X':\r\n          setCanvasToggleAbs({ height: false, width: true });\r\n          break;\r\n        case 'Y':\r\n          console.log(\"Y STACK\")\r\n          downsizeModel(DockLocation.BOTTOM);\r\n          break;\r\n */        case 'Z':\r\n          downsizeModel(DockLocation.CENTER);\r\n          setCanvasToggleAbs({ height: false, width: false });\r\n      }\r\n\r\n    } /* else if (stackStrategy === 'X') {\r\n      // No need for absolute width anymore\r\n      setCanvasToggleAbs({ height: false, width: false });\r\n    } */\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [isTooNarrow]);\r\n\r\n\r\n  // is the viewport now wide enough to switch back to the previous model?\r\n  const tooWide = stashedModels.length > 1 ? ((stashedModels[stashedModels.length - 2] as IAnalyzedModel).widthNeeded!) : 9999999999;\r\n  const isTooWide = useMedia(`(min-width: ${tooWide}px`);\r\n  useEffect(() => {\r\n\r\n    if (isTooWide) {\r\n      migrateModel(currentModel, stashedModels[stashedModels.length - 2]);\r\n      stashPop();\r\n    }\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [isTooWide]);\r\n\r\n\r\n\r\n  // If too short for current model switch to absolute, \r\n  /*   const isTooShort = useMedia(`(max-height: ${currentModel.heightNeeded}px)`);\r\n    useEffect(() => {\r\n      if (currentModel) {\r\n        if (!isTooShort) {\r\n          setCanvasToggleAbs({ height: false, width: canvasToggleAbs.width });\r\n        } else {\r\n          setCanvasToggleAbs({ height: true, width: canvasToggleAbs.width });\r\n        }\r\n      }\r\n      // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [isTooShort]);\r\n  \r\n   */\r\n  const factory = (node: TabNode) => {\r\n    var component = node.getComponent();\r\n    if (component === \"text\") {\r\n      return <div dangerouslySetInnerHTML={{ __html: node.getConfig().text }} />\r\n    } else if (component === \"pdf\") {\r\n      const sMax = {\r\n        height: '99%',\r\n        width: '99%'\r\n      }\r\n      const cont = {\r\n        height: '100%',\r\n        width: '100%',\r\n        overflow: 'hidden'\r\n      }\r\n      return <div style={cont}>  <iframe src={node.getConfig().text} style={sMax} /> </div>\r\n    } else if (component === \"image\") {\r\n      const s = {\r\n        height: '99%',\r\n        width: '99%'\r\n      }\r\n      return <img src={node.getConfig().text} style={s} />\r\n    } else if (component === \"123check\") {\r\n      const s = {\r\n        width: '1220px',\r\n        height: '1000px'\r\n      }\r\n      return <img src={node.getConfig().text} style={s} />\r\n    }\r\n  }\r\n\r\n  /*   const onAdd = (event: any) => {\r\n      (layoutRef.current! as Layout).addTabWithDragAndDropIndirect(\"Add panel<br>(Drag to location)\", {\r\n        component: \"text\",\r\n        name: \"added\",\r\n        config: { text: \"i was added\", minHeight: 300, minWidth: 400 }\r\n      }, undefined);\r\n    }\r\n   */\r\n  const interceptAction = (action: Action) => {\r\n\r\n    // when tabs are moved by the user, this can lead to a \"divide\" whereby a new tabset is created automatically for the tab\r\n    // this new tabset will not have a minimum size and so this needs to be set\r\n    // also for deletion of tabs or addition of nodes, the size may be impacted\r\n    setTimeout(() => {\r\n      stashedModels[stashedModels.length - 1] = analyseModel(currentModel.model, true /* update min sizes if needed*/);\r\n    }, 100);\r\n\r\n    return action;\r\n  }\r\n\r\n  /*   const changeStrategy = (event: any) => {\r\n      setCanvasToggleAbs({ height: false, width: false });\r\n      setStackStrategy(event.target.value);\r\n    }\r\n   */\r\n  const loadPanels = (event: any) => {\r\n    setMaxPanels(parseInt(event.target.value));\r\n    stashSet([loadTemplateModel(DockLocation.CENTER, parseInt(event.target.value))]);\r\n  }\r\n\r\n  const modelChanged = (model: Model) => {\r\n    stashedModels[stashedModels.length - 1] = analyseModel(currentModel.model, false /* avoid infintie loop*/);\r\n  }\r\n\r\n  const absStyle = {\r\n    height: canvasToggleAbs.height ? currentModel.heightNeeded + 'px' : '100%',\r\n    width: canvasToggleAbs.width ? currentModel.widthNeeded + 'px' : '100%'\r\n  };\r\n\r\n\r\n  return (\r\n    <div className=\"outer\" style={absStyle}>\r\n      {/*       <button onClick={onAdd}>Add Panel</button>\r\n      <span> Stacking strategy:</span>\r\n      <select value={stackStrategy} onChange={changeStrategy}>\r\n        <option value=\"X\">X axis</option>\r\n        <option value=\"Y\">Y axis</option>\r\n        <option value=\"Z\">Z axis</option>\r\n      </select>\r\n */}      <span> Number of Panels:</span>\r\n      <select value={maxPanels} onChange={loadPanels}>\r\n        <option value=\"1\">1</option>\r\n        <option value=\"2\">2</option>\r\n        <option value=\"3\">3</option>\r\n        <option value=\"4\">4</option>\r\n        <option value=\"5\">5</option>\r\n      </select>\r\n      <div className=\"inner\" >\r\n        {currentModel && (\r\n          <Layout ref={layoutRef}\r\n            onAction={interceptAction}\r\n            onModelChange={modelChanged}\r\n            model={currentModel.model}\r\n            factory={factory} />)}\r\n      </div>\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('container')\n);\n"],"sourceRoot":""}